buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

mainClassName = "com.asigner.kidpython.ide.App"

apply from: "repositories.gradle"

import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

configurations {
    providedCompile

    compile

    // OS specific runtimes
    runtimeLinux
    runtimeMac
    runtimeWin
}

dependencies {
    // For compilation, we use the system's runtime.
    // providedCompile group: 'org.eclipse', name: 'platform-minimal', version: '4.5.1', configuration: 'linux-gtk-x86_64'

    compile 'com.google.guava:guava:19.0'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.7.0'
    compile 'org.apache.xmlgraphics:batik-svggen:1.8'
    compile 'org.apache.xmlgraphics:batik-dom:1.8'

    // Store snippets in dropbox
    compile 'com.dropbox.core:dropbox-core-sdk:2.1.1'

    // OS-dependent runtimes
    runtimeLinux group: 'org.eclipse', name: 'platform-minimal', version: '4.5.1', configuration: 'linux-gtk-x86_64'
    runtimeMac group: 'org.eclipse', name: 'platform-minimal', version: '4.5.1', configuration: 'macosx-cocoa-x86_64'
    runtimeWin group: 'org.eclipse', name: 'platform-minimal', version: '4.5.1', configuration: 'win32-x86'

    testCompile 'junit:junit:4.12'
    testCompile 'org.mockito:mockito-core:1.9.5'
}

// Setup OS dependent runtime path
def osDependentRuntime;
String osName = System.getProperty("os.name").toLowerCase();
if (osName.contains("windows")) {
    osDependentRuntime = configurations.runtimeWin
} else if (osName.contains("linux")) {
    osDependentRuntime = configurations.runtimeLinux
} else {
    osDependentRuntime = configurations.runtimeMac
}

compileJava {
    // For compilation, we use the system's runtime.
    // classpath += configurations.providedCompile
    classpath += osDependentRuntime
}

test {
    classpath += osDependentRuntime;
}

run {
    classpath += osDependentRuntime;

    def os = System.getProperty("os.name").split(" ")[0]
    if (os == "Mac") {
        jvmArgs "-XstartOnFirstThread"
    }
}

task shadowJarWin(type: ShadowJar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from sourceSets.main.output //tells the task to include the project code
    baseName = project.archivesBaseName
    classifier = "win"
    configurations = [ project.configurations.runtime, project.configurations.runtimeWin ] //tells the task to shadow in the jars files in the 'runtime' scope

    // Don't include signatures
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    mergeServiceFiles()
}

task shadowJarLinux(type: ShadowJar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }

    from sourceSets.main.output //tells the task to include the project code
    baseName = project.archivesBaseName
    classifier = "linux"
    from sourceSets.test.output
    configurations = [ project.configurations.runtime, project.configurations.runtimeLinux ] //tells the task to shadow in the jars files in the 'runtime' scope

    // Don't include signatures
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    mergeServiceFiles()
}

task shadowJarMac(type: ShadowJar) {
    manifest {
        attributes 'Main-Class': mainClassName
    }
    from sourceSets.main.output //tells the task to include the project code
    baseName = project.archivesBaseName
    classifier = "mac"
    configurations = [ project.configurations.runtime, project.configurations.runtimeMac ] //tells the task to shadow in the jars files in the 'runtime' scope

    // Don't include signatures
    exclude "META-INF/*.SF"
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'

    mergeServiceFiles()
}

// Use this task if you need all runtime deps in one place. Helpful for me when playing with Eclipse (to get a
// decent SWT UI designer...)
task copyToLib(type: Copy) {
    into "$buildDir/output/lib"
    from configurations.runtime
    from osDependentRuntime
}

shadowJar {
    dependsOn shadowJarLinux
    dependsOn shadowJarWin
    dependsOn shadowJarMac
}
